using Hotel.Domain.Entities.User;
using Hotel.Helpers;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using AutoMapper;
using Hotel.BusinessLogic.DBModel;
using Hotel.Domain.Entities.Admin;
using Hotel.Domain.Entities.Booking;
using Hotel.Domain.Entities.Room;
using Hotel.Domain.Enums;
using Hotel.Web.Models;
using Stripe;
using System.Configuration;

namespace Hotel.BusinessLogic.Core
{
	public class UserApi
	{
		public UserApi()
		{
			StripeConfiguration.ApiKey = ConfigurationManager.AppSettings["StripeSecretKey"];
		}

		internal async Task<object> PaymentProcessAction(PaymentModels model)
		{
		       var options = new ChargeCreateOptions
		       {
		           Amount = model.Amount,
		           Currency = model.Currency,
		           Source = model.Token, // This is the token generated by Stripe.js
		           Description = $"Payment for {model.NumberOfDays} days in a {model.RoomType} room"
		       };

		       var service = new ChargeService();
		       Charge charge = await service.CreateAsync(options);
		       return charge;
		}

		internal ULoginResp UserLoginAction(ULoginData data)
		{
			UDBTable result;
			var validate = new EmailAddressAttribute();
			if (validate.IsValid(data.Credential))
			{
				var pass = LoginHelper.HashGen(data.Password);
				using (var db = new HotelContext())
				{
					result = db.Users.FirstOrDefault(u => u.Email == data.Credential && u.Password == pass);
				}

				if (result == null)
				{
					return new ULoginResp { Status = false, StatusMessage = "The Username or Password is Incorrect" };
				}

				if (result.Role == URole.Admin)
				{

					return new ULoginResp { Status = true, IsAdmin = true};
				}

				return new ULoginResp { Status = true, IsAdmin = false };
			}
			else
			{
				var pass = LoginHelper.HashGen(data.Password);
				using (var db = new HotelContext())
				{
					result = db.Users.FirstOrDefault(u => u.Username == data.Credential && u.Password == pass);
				}

				if (result == null)
				{
					return new ULoginResp { Status = false, StatusMessage = "The Username or Password is Incorrect" };
				}

				if (result.Role == URole.Admin)
				{

					return new ULoginResp { Status = true, IsAdmin = true };
				}

				return new ULoginResp { Status = true, IsAdmin = false };
			}
		}

		internal HttpCookie Cookie(string loginCredential)
		{
			var apiCookie = new HttpCookie("X-KEY")
			{
				Value = CookieGenerator.Create(loginCredential)
			};

			using (var db = new HotelContext())
			{
				Session curent;
				var validate = new EmailAddressAttribute();
				if (validate.IsValid(loginCredential))
				{
					curent = (from e in db.Sessions where e.Username == loginCredential select e).FirstOrDefault();
				}
				else
				{
					curent = (from e in db.Sessions where e.Username == loginCredential select e).FirstOrDefault();
				}

				if (curent != null)
				{
					curent.CookieString = apiCookie.Value;
					curent.ExpireTime = DateTime.Now.AddMinutes(60);
					using (var todo = new HotelContext())
					{
						todo.Entry(curent).State = EntityState.Modified;
						todo.SaveChanges();
					}
				}
				else
				{
					db.Sessions.Add(new Session
					{
						Username = loginCredential,
						CookieString = apiCookie.Value,
						ExpireTime = DateTime.Now.AddMinutes(60)
					});
					db.SaveChanges();
				}
			}

			return apiCookie;
		}

		internal UserMinimal UserCookie(string cookie)
		{
			Session session;
			UDBTable curentUser;

			using (var db = new HotelContext())
			{
				session = db.Sessions.FirstOrDefault(s => s.CookieString == cookie && s.ExpireTime > DateTime.Now);
			}

			if (session == null) return null;
			using (var db = new HotelContext())
			{
				var validate = new EmailAddressAttribute();
				if (validate.IsValid(session.Username))
				{
					curentUser = db.Users.FirstOrDefault(u => u.Email == session.Username);
				}
				else
				{
					curentUser = db.Users.FirstOrDefault(u => u.Username == session.Username);
				}
			}

			if (curentUser == null) return null;
			var userminimal = Mapper.Map<UserMinimal>(curentUser);

			return userminimal;
		}

		internal URegisterResp UserRegisterAction(URegisterData data)
		{
			var validate = new EmailAddressAttribute();
			if (validate.IsValid(data.Email))
			{
				using (var context = new HotelContext())
				{
					var existingUser = context.Users.SingleOrDefault(u => u.Username == data.Username || u.Email == data.Email);
					if (existingUser != null)
					{
						return new URegisterResp { Status = false, StatusMessage = "User already exists"};
					}

					else
					{
						var newUser = new UDBTable
						{
							Username = data.Username,
							Email = data.Email,
							Password = LoginHelper.HashGen(data.Password),
						};

						context.Users.Add(newUser);
						context.SaveChanges();
						return new URegisterResp { Status = true};
					}
				}
			}

			else
			{
				return new URegisterResp() { Status = false, StatusMessage = "Invalid email format" };
			}
		}

		internal IEnumerable<RDBTable> GetAllRoomTypesAction()
		{
			using (var context = new HotelContext())
			{
				var rooms = context.Rooms.ToList();

				var mappedRooms = rooms.Select(room => new RDBTable()
				{
					Id = room.Id,
					RoomType = room.RoomType,
					Price = room.Price
				});

				return mappedRooms;
			}
		}

		internal async Task<UBookingResp> UserBookingLogic(UBookingData data)
		{
			try
			{
				using (var context = new HotelContext())
				{
					var existingBooking = context.Bookings.FirstOrDefault(b => b.Room.RoomType == data.RoomType &&
																			   (b.CheckInDate < data.CheckOut && b.CheckOutDate > data.CheckIn));
					if (existingBooking == null)
					{
						var user = context.Users.FirstOrDefault(u => u.Username == data.Username);
						var room = context.Rooms.FirstOrDefault(r => r.RoomType == data.RoomType);
						if (room == null || user == null)
						{
							return new UBookingResp { Status = 1 }; // Invalid username or room type
						}

						if (data.CheckIn > data.CheckOut)
						{
							return new UBookingResp { Status = 2 }; // Invalid dates
						}

						var overlappingBookings = context.Bookings.Any(b => b.Room.RoomType == data.RoomType &&
																			b.CheckInDate < data.CheckOut && b.CheckOutDate > data.CheckIn);
						if (!overlappingBookings)
						{
							var finalPrice = CalculateFinalPrice(data);

							// Create a payment model
							var paymentModel = new PaymentModels
							{
								Amount = (int)(finalPrice * 100), // Stripe expects the amount in cents
								Currency = "usd",
								NumberOfDays = (data.CheckOut - data.CheckIn).Days,
								RoomType = data.RoomType
							};

							// Process the payment
							var paymentResult = await PaymentProcessAction(paymentModel);

							if (paymentResult is Charge stripeCharge && stripeCharge.Status == "succeeded")
							{
								var newBooking = new BDBTable()
								{
									CheckInDate = data.CheckIn,
									CheckOutDate = data.CheckOut,
									FinalPrice = finalPrice,
									User = user,
									Room = room
								};

								context.Bookings.Add(newBooking);
								context.SaveChanges();

								return new UBookingResp { Status = 4 }; // Success
							}
							else
							{
								return new UBookingResp { Status = 5 }; // Payment failed
							}
						}
						else
						{
							return new UBookingResp { Status = 3 }; // Overlapping booking
						}
					}
					else
					{
						return new UBookingResp { Status = 3 }; // Existing booking
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"An error occurred while processing the booking: {ex.Message}");
				return new UBookingResp { Status = 6 }; // General error
			}
		}


		internal decimal CalculateFinalPrice(UBookingData data)
		{
			decimal price = 0;
			using (var context = new HotelContext())
			{
				var room = context.Rooms.FirstOrDefault(r => r.RoomType == data.RoomType);
				if (room != null)
				{
					decimal numofDays = (decimal)(data.CheckOut - data.CheckIn).TotalDays;
					price = numofDays * room.Price;
				}
			}
			return price;
		}

		internal List<DateTime> GetBookedDatesByRoomTypeAction(RoomType roomType)
		{
			List<DateTime> bookedDates = new List<DateTime>();

			using (var context = new HotelContext())
			{
				var bookings = context.Bookings.Where(b => b.Room.RoomType == roomType).ToList();

				foreach (var booking in bookings)
				{
					DateTime currentDate = booking.CheckInDate;
					while (currentDate < booking.CheckOutDate)
					{
						bookedDates.Add(currentDate);
						currentDate = currentDate.AddDays(1);
					}
				}
			}
			return bookedDates;
		}

		internal IEnumerable<BDBTable> GetUsersBookingsAction(string username)
		{
			using (var context = new HotelContext())
			{
				var bookings = context.Bookings
					.Include(b => b.Room)
					.Where(u => u.User.Username == username)
					.ToList();

				var mappedBookings = bookings.Select(b => new BDBTable
				{
					BookingId = b.BookingId,
					CheckInDate = b.CheckInDate,
					CheckOutDate = b.CheckOutDate,
					FinalPrice = b.FinalPrice,
					Room = b.Room
				});

				return mappedBookings;
			}
		}

		internal void CancelBookingAction(DateTime checkInDate, RoomType roomType)
		{
			using (var context = new HotelContext())
			{
				var result = context.Bookings.FirstOrDefault(b => b.CheckInDate == checkInDate && b.Room.RoomType == roomType);
				if (result != null)
				{
					context.Bookings.Remove(result);
					context.SaveChanges();
				}
			}
		}

	}
}
